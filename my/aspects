#include "pack_contains.hpp"

namespace my::aspects
{
  template<typename Tag, template<typename> typename Aspect, typename Next>
  struct link {};

  namespace detail
  {
    template<typename Link, typename... Tags>
    struct type_from_list
    {
      using type = Link;
    };

    template<typename Tag, template<typename> typename Aspect, typename Next, typename... Tags>
    struct type_from_list<link<Tag, Aspect, Next>, Tags...>
    {
      using base = typename type_from_list<Next, Tags...>::type;
      using type = std::conditional_t<pack_contains<Tag, Tags...>, Aspect<base>, base>;
    };
  }

  template<typename Link, typename... Tags>
  using type_from_list = typename detail::type_from_list<Link, Tags...>::type;

  template<template<typename> typename Aspect, typename T>
  constexpr bool has_aspect = false;

  template<template<typename> typename Aspect, typename T>
  constexpr bool has_aspect<Aspect, Aspect<T>> = true;

  template<template<typename> typename Aspect, template<typename> typename Aspect2, typename T>
  constexpr bool has_aspect<Aspect, Aspect2<T>> = has_aspect<Aspect, T>;
}
